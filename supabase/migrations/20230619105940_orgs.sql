CREATE TABLE
  public.orgs (
    id uuid NOT NULL,
    created_by uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    logo text NULL,
    name text NOT NULL,
    customer_id character varying,
    constraint orgs_pkey primary key (id)
  );

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.orgs FOR EACH ROW EXECUTE FUNCTION extensions.moddatetime('updated_at');

CREATE TYPE user_right AS ENUM ('admin', 'write', 'upload', 'read');

CREATE TABLE
  public.org_users (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp with time zone null default now(),
    user_id uuid not null,
    right public.user_right not null default 'read'::user_right,
    org_id uuid not null,
    app_id character varying null,
    channel_id bigint null,
    constraint org_users_pkey primary key (id),
    constraint org_users_app_id_fkey foreign key (app_id) references apps (app_id) on delete cascade,
    constraint org_users_channel_id_fkey foreign key (channel_id) references channels (id) on delete cascade,
    constraint org_users_org_id_fkey foreign key (org_id) references orgs (id) on delete cascade,
    constraint org_users_user_id_fkey foreign key (user_id) references users (id) on delete cascade
  );

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.org_users FOR EACH ROW EXECUTE FUNCTION extensions.moddatetime('updated_at');

-- create default org for all users
INSERT INTO public.orgs (id, created_by, name)
SELECT uuid_generate_v4(), id, COALESCE(first_name, 'Default Org Name')
FROM public.users;

-- Add all users to org_users for they own org
INSERT INTO public.org_users (user_id, org_id, "right")
SELECT users.id, orgs.id, 'admin'::user_right
FROM public.users
INNER JOIN public.orgs ON public.users.id = public.orgs.user_id;

-- Add old channel users to org_users
INSERT INTO public.org_users (user_id, org_id, "right", channel_id, app_id)
SELECT cu.user_id, ou.org_id, 'read'::user_right, cu.channel_id, cu.app_id
FROM public.channel_users cu
JOIN public.org_users ou ON cu.user_id = ou.user_id;
